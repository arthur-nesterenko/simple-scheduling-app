{"version":3,"sources":["utils/time-helpers.js","hooks/use-session-storage.js","context/booking-provider/booking-provider.jsx","context/booking-provider/use-bookig-provider.js","hooks/use-toggle.js","components/booking-form/booking-form.jsx","hooks/use-booked-slots.js","components/booking-modal/booking-modal.jsx","components/time-slot/slot.jsx","components/time-slot/helpers.js","components/time-slot/custom-time-slot.jsx","components/time-slot/time-slot.jsx","components/time-slot-list/time-slot-list.jsx","App.js","serviceWorker.js","index.js"],"names":["moment","extendMoment","Moment","normalizeTime","time","getTimeSlots","start","end","interval","duration","finish","initialStart","startTime","endTime","finishTime","isBefore","add","timeStops","isSame","subtract","format","isAfter","push","getRange","range","getRoundedHour","isMoreOrEqualHalf","minute","second","useSessionStorage","key","initialValue","raw","React","useState","sessionStorageValue","sessionStorage","getItem","setItem","String","JSON","stringify","parse","state","setState","useEffect","serializedState","BookingProviderContext","createContext","BookingProvider","children","initialUsers","updateSessionStorage","users","setUsers","addUser","useCallback","email","slot","prev","toLowerCase","hasEmail","Set","map","user","has","value","useMemo","Provider","useBookingProvider","context","useContext","undefined","Error","useToggle","on","setOn","BookingForm","onSubmit","values","setValues","handleSubmit","e","preventDefault","emailExist","onChange","target","name","Form","InputGroup","Input","type","invalid","valid","placeholder","InputGroupAddon","addonType","Button","disabled","color","useBookedSlots","bookedSlots","isBooked","checkIsAvailableSlot","slotRange","some","s","contains","getFirstAvailableSlots","defaultSlot","find","r","ran","intersect","BookingModal","onClick","isOpen","onConfirmBooking","disableBookButton","Modal","toggle","ModalHeader","ModalBody","Slot","activeSlot","currentSlot","handleChange","DropdownItem","className","active","isEqual","Badge","getHoursFromRange","excludeEnd","Array","from","by","m","disabledMinutes","h","current","Math","abs","diff","baseProps","showSecond","minuteStep","allowEmpty","hideDisabledOptions","memo","min","max","val","disabledHours","data","filter","reduce","acc","curr","flat","getNotAvailableHours","hoursBeforeStart","startOf","hoursAfterEnd","endOf","slice","concat","defaultValue","PropTypes","oneOfType","string","instanceOf","Date","func","memoizedEndInterval","getEndTime","getAvailableSlots","selected","setSelected","dropdownOpen","onToggleDropdown","modalOpen","onToggleModal","memoizedSlots","isSelectedSlot","hasAvailable","Dropdown","size","DropdownToggle","caret","Fragment","DropdownMenu","header","index","items","item","App","slots","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f6198be4.chunk.js","sourcesContent":["import Moment from 'moment';\nimport { extendMoment } from 'moment-range';\n\n\nconst moment = extendMoment( Moment );\n\n\nexport const TIME_FORMAT = 'HH:mm';\nexport const getEndTime = ( time, interval = 3, duration = 'hours' ) => {\n    return new moment( time, TIME_FORMAT ).add( interval, duration ).format( TIME_FORMAT );\n\n};\nexport const normalizeTime = ( time ) => moment( time, TIME_FORMAT );\n\n\nexport const getTimeSlots = ( start, end, interval = 1, duration = 'hour', finish = '22:00' ) => {\n    const initialStart = normalizeTime( start );\n    const startTime = normalizeTime( start );\n    const endTime = normalizeTime( end );\n    const finishTime = normalizeTime( finish );\n\n\n    if ( endTime.isBefore( startTime ) ) {\n        endTime.add( 1, 'day' );\n    }\n\n    const timeStops = [];\n\n    while ( startTime <= endTime ) {\n        if ( !startTime.isSame( initialStart ) ) {\n            startTime.subtract( interval, duration );\n        }\n\n\n        const start = new moment( startTime ).format( TIME_FORMAT );\n\n        const end = startTime.add( interval, duration );\n\n        //exit from the loop\n        if ( end.isAfter( finishTime ) ) {\n            break;\n        }\n        timeStops.push( {\n            start: start,\n            end: end.format( TIME_FORMAT ),\n        } );\n\n        startTime.add( interval, duration );\n\n    }\n    return timeStops;\n};\n\n\nexport const getRange = ( { start, end } ) => {\n    const startTime = normalizeTime( start );\n    const endTime = normalizeTime( end );\n\n\n    return moment.range( startTime, endTime );\n};\n\n\nexport const getRoundedHour = ( start ) => {\n    start = moment( start, TIME_FORMAT );\n    const isMoreOrEqualHalf = start.minute() >= 30;\n\n    return +start.minute( isMoreOrEqualHalf ? 60 : 0 ).second( 0 ).format( 'H' );\n\n\n};\n\n\n\n\n","import React from 'react';\n\n\nconst useSessionStorage = ( key, initialValue, raw ) => {\n    const [state, setState] = React.useState( () => {\n        try {\n            const sessionStorageValue = sessionStorage.getItem( key );\n            if ( typeof sessionStorageValue !== 'string' ) {\n                sessionStorage.setItem( key, raw ? String( initialValue ) : JSON.stringify( initialValue ) );\n                return initialValue;\n            } else {\n                return raw ? sessionStorageValue : JSON.parse( sessionStorageValue || 'null' );\n            }\n        } catch {\n\n            return initialValue;\n        }\n    } );\n\n    React.useEffect( () => {\n        try {\n            const serializedState = raw ? String( state ) : JSON.stringify( state );\n            sessionStorage.setItem( key, serializedState );\n        } catch {\n\n        }\n    } );\n    \n\n    return [state, setState];\n};\n\n\nexport default useSessionStorage;\n","import React from 'react';\nimport useSessionStorage from './../../hooks/use-session-storage';\n\n/**\n *\n * @type {React.Context<{}>}\n */\nexport const BookingProviderContext = React.createContext( {} );\n\n/**\n *\n * @param children\n * @returns {*}\n * @constructor\n */\nconst BookingProvider = ( { children } ) => {\n\n    const [initialUsers, updateSessionStorage] = useSessionStorage( 'users', [], false );\n    const [users, setUsers] = React.useState( () => initialUsers );\n\n    const addUser = React.useCallback( ( email, slot ) => {\n        setUsers( prev => [...prev, { email: email.toLowerCase(), slot }] );\n    }, [] );\n\n    const hasEmail = React.useCallback( ( email ) => {\n        const usersSet = new Set( users.map( user => user.email ) );\n        return usersSet.has( email );\n    }, [users] );\n\n    React.useEffect( () => {\n        updateSessionStorage( users );\n    }, [updateSessionStorage, users] );\n\n    const value = React.useMemo( () => ({\n        addUser,\n        hasEmail,\n        users,\n    }), [addUser, hasEmail, users] );\n\n\n    return <BookingProviderContext.Provider value={value}>\n        {children}\n    </BookingProviderContext.Provider>;\n};\n\n\nexport default BookingProvider;\n","import React from 'react';\nimport { BookingProviderContext } from './booking-provider';\n\n\nconst useBookingProvider = () => {\n    const context = React.useContext( BookingProviderContext );\n\n    if ( context === undefined ) {\n        throw new Error( `useBookingProvider must be used within a BookingProvider` );\n    }\n\n    return context;\n};\n\n\nexport default useBookingProvider;\n","import React from 'react';\n\n/**\n *\n * @param initialValue\n * @returns {[unknown, function(): void]}\n */\nconst useToggle = ( initialValue ) => {\n    const [on, setOn] = React.useState( initialValue );\n\n    const onToggle = React.useCallback( () => setOn( prev => !prev ), [] );\n\n    return [on, onToggle];\n};\n\nexport default useToggle;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Button, Form, Input, InputGroup, InputGroupAddon } from 'reactstrap';\nimport { useBookingProvider } from './../../context/booking-provider';\n\n\nconst BookingForm = ( { onSubmit } ) => {\n    const { hasEmail } = useBookingProvider();\n    const [values, setValues] = React.useState( null );\n    const handleSubmit = React.useCallback( ( e ) => {\n        e.preventDefault();\n\n        onSubmit( values );\n\n\n    }, [hasEmail, onSubmit, values] );\n\n    const emailExist = values && hasEmail( values.email );\n\n    const onChange = React.useCallback( e => {\n        const target = e.target;\n        setValues( prev => ({\n            ...prev,\n            [ target.name ]: target.value,\n        }) );\n    }, [] );\n\n    return <Form onSubmit={handleSubmit}>\n        <InputGroup>\n            <Input type='email'\n                   name='email'\n                   onChange={onChange}\n                   invalid={emailExist}\n                   valid={values ? !hasEmail( values.email ) : undefined}\n                   placeholder=\"Please enter your email\"/>\n            <InputGroupAddon addonType=\"append\">\n                <Button disabled={emailExist} color=\"secondary\">Confirm</Button>\n            </InputGroupAddon>\n        </InputGroup>\n    </Form>;\n};\n\n\nBookingForm.propTypes = {\n    onSubmit: PropTypes.func,\n};\nexport default BookingForm;\n","import React from 'react';\nimport { getTimeSlots, getRange } from './../utils/time-helpers';\nimport { useBookingProvider } from './../context/booking-provider';\n\n\nconst useBookedSlots = () => {\n    const { users } = useBookingProvider();\n    const slots = users.map( user => user.slot );\n    const bookedSlots = slots.map( getRange );\n\n    const isBooked = ( slot ) => {\n        const slotSet = new Set( users.map( ( { slot } ) => JSON.stringify( slot ) ) );\n        return slotSet.has( JSON.stringify( slot ) );\n    };\n\n    const checkIsAvailableSlot = ( slot ) => {\n        const slotRange = getRange( slot );\n        return bookedSlots.some( s => s.contains( slotRange ) );\n    };\n\n    const getFirstAvailableSlots = ( defaultSlot, slot ) => {\n        if ( checkIsAvailableSlot( defaultSlot ) ) {\n            return defaultSlot;\n        }\n        const range = getTimeSlots( slot.start, slot.end, 30, 'minutes' );\n\n        return range.find( r => {\n            const ran = getRange( r );\n            const isIntersect = bookedSlots.some( slot => ran.intersect( slot ) );\n            return isIntersect === false;\n        } );\n\n    };\n\n\n    return React.useMemo( () => ({\n        bookedSlots,\n        checkIsAvailableSlot,\n        getFirstAvailableSlots,\n        isBooked,\n    }), [bookedSlots] );\n};\n\nexport default useBookedSlots;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Button, Modal, ModalHeader, ModalBody } from 'reactstrap';\nimport BookingForm from './../booking-form';\nimport useBookedSlots from './../../hooks/use-booked-slots';\n\n\nconst BookingModal = ( {\n                           onClick,\n                           isOpen,\n                           slot,\n                           onConfirmBooking,\n                       } ) => {\n    const { checkIsAvailableSlot } = useBookedSlots();\n\n\n    const handleSubmit = React.useCallback( value => {\n        onConfirmBooking( value );\n        onClick();\n    }, [onClick, onConfirmBooking] );\n    const disableBookButton = checkIsAvailableSlot( slot );\n\n\n    return (\n        <div>\n            <Button color=\"primary\" disabled={disableBookButton} onClick={onClick}>Book</Button>\n            <Modal isOpen={isOpen} toggle={onClick}>\n                <ModalHeader toggle={onClick}>Slot {slot.start} - {slot.end}</ModalHeader>\n                <ModalBody>\n                    <BookingForm onSubmit={handleSubmit}/>\n                </ModalBody>\n            </Modal>\n        </div>\n    );\n};\n\nBookingModal.propTypes = {\n    slot: PropTypes.shape( {\n        start: PropTypes.string,\n        end: PropTypes.string,\n    } ),\n    onClick: PropTypes.func,\n    isOpen: PropTypes.bool,\n    onConfirmBooking: PropTypes.func,\n};\n\nexport default BookingModal;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Badge, DropdownItem } from 'reactstrap';\nimport isEqual from 'lodash.isequal';\nimport useBookedSlots from '../../hooks/use-booked-slots';\n\nconst Slot = ( { onChange, activeSlot, currentSlot } ) => {\n    const { checkIsAvailableSlot } = useBookedSlots();\n    const handleChange = React.useCallback( () => {\n        onChange( currentSlot );\n    }, [currentSlot] );\n\n\n    const disabled = checkIsAvailableSlot( currentSlot );\n\n\n    return <DropdownItem\n        className='d-flex justify-content-between align-items-center'\n        active={isEqual( activeSlot, currentSlot )}\n        disabled={disabled}\n        onClick={handleChange}>\n        <Badge color={disabled ? 'secondary' : 'primary'}>{currentSlot.start}</Badge>\n        <span>-</span>\n        <Badge color={disabled ? 'secondary' : 'primary'}>{currentSlot.end}</Badge>\n    </DropdownItem>;\n};\n\nconst SlotShape = PropTypes.shape( {\n    start: PropTypes.string,\n    end: PropTypes.string,\n} );\nSlot.propTypes = {\n    activeSlot: SlotShape,\n    currentSlot: SlotShape,\n    onChange: PropTypes.func,\n};\n\nexport default Slot;\n","import { getRange, getRoundedHour, getTimeSlots, normalizeTime } from './../../utils/time-helpers';\nimport moment from 'moment';\n\n\nexport const getNotAvailableHours = ( slot, bookedSlots ) => {\n    const range = getTimeSlots( slot.start, slot.end, 30, 'minutes' );\n    const ranges = range.filter( r => {\n        const ran = getRange( r );\n        return bookedSlots.some( slot => ran.intersect( slot ) );\n    } ).map( getRange );\n    const data = ranges.reduce( ( acc, curr ) => [...acc, Array.from( curr.by( 'hour' ), getRoundedHour )], [] ).flat();\n    return [...new Set( data )];\n};\n\nexport const getHoursFromRange = ( range, excludeEnd = false ) => Array.from( range.by( 'hour', { excludeEnd } ), m => +m.format( 'HH' ) );\nexport const parseNumberFromHour = ( time ) => +normalizeTime( time ).format( \"H\" );\n\nexport const disabledMinutes = time => h => {\n    const disabledMinutes = [];\n    const current = moment( h, 'HH' );\n    const res = Math.abs( normalizeTime( time ).diff( current, 'minutes', true ) );\n    if ( res <= 60 ) {\n        return [30, 0];\n    }\n    return disabledMinutes;\n};\n","import React from 'react';\nimport TimePicker from 'rc-time-picker';\nimport 'rc-time-picker/assets/index.css';\nimport moment from 'moment';\nimport { getRange, normalizeTime, TIME_FORMAT } from './../../utils/time-helpers';\nimport useBookedSlots from '../../hooks/use-booked-slots';\nimport { getNotAvailableHours, parseNumberFromHour, getHoursFromRange, disabledMinutes } from './helpers';\n\nconst baseProps = {\n    showSecond: false,\n    minuteStep: 30,\n    format: TIME_FORMAT,\n    allowEmpty: false,\n    hideDisabledOptions: true,\n};\n\n\nconst CustomTimeSlot = ( { start, end, min, max, onChange } ) => {\n    const { bookedSlots } = useBookedSlots();\n\n    const handleChange = ( name ) => ( val ) => {\n        onChange( {\n            start,\n            end,\n            [ name ]: val.format( TIME_FORMAT ),\n        } );\n    };\n\n    const disabledHours = ( name ) => () => {\n        const disabledHours = getNotAvailableHours( { start: min, end: max }, bookedSlots );\n        const hoursBeforeStart = getHoursFromRange( getRange( {\n            start: moment().startOf( 'day' ),\n            end: min,\n        } ), true );\n        const hoursAfterEnd = getHoursFromRange( getRange( {\n            start: max,\n            end: moment().endOf( 'day' ),\n        } ) ).slice( 1 );\n        disabledHours.push( parseNumberFromHour( name === 'start' ? end : start ) );\n        return disabledHours.concat( hoursBeforeStart, hoursAfterEnd );\n    };\n\n    return <div className='row'>\n        <div className='col-sm-6'>\n            <TimePicker onChange={handleChange( 'start' )}\n                        defaultValue={normalizeTime( start )}\n                        {...baseProps}\n                        value={normalizeTime( start )}\n                        disabledHours={disabledHours( 'start' )}\n                        disabledMinutes={disabledMinutes( end )}/>\n        </div>\n        <div className='col-sm-6'>\n            <TimePicker onChange={handleChange( 'end' )}\n                        value={normalizeTime( end )}\n                        defaultValue={normalizeTime( end )}\n                        {...baseProps}\n                        disabledHours={disabledHours( 'end' )}\n                        disabledMinutes={disabledMinutes( end )}/>\n        </div>\n    </div>;\n\n};\n\n\nexport default React.memo( CustomTimeSlot );\n\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Dropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\nimport { getTimeSlots, getEndTime } from './../../utils/time-helpers';\nimport useToggle from './../../hooks/use-toggle';\nimport BookingModal from './../booking-modal';\nimport Slot from './slot';\nimport CustomTimeSlot from './custom-time-slot';\nimport { useBookingProvider } from './../../context/booking-provider';\nimport useBookedSlots from './../../hooks/use-booked-slots';\n\n\nconst TimeSlot = ( { start, end, onChange } ) => {\n    const { getFirstAvailableSlots, isBooked, bookedSlots } = useBookedSlots();\n    const memoizedEndInterval = React.useMemo( () => getEndTime( start ), [start] );\n\n    const getAvailableSlots = () => getFirstAvailableSlots( { start, end }, {\n        start,\n        end: memoizedEndInterval,\n    } );\n\n    const [selected, setSelected] = React.useState( getAvailableSlots );\n    const [dropdownOpen, onToggleDropdown] = useToggle( false );\n    const [modalOpen, onToggleModal] = useToggle( false );\n    const { addUser } = useBookingProvider();\n    const memoizedSlots = React.useMemo( () => getTimeSlots( start, memoizedEndInterval, 30, 'minutes' ), [memoizedEndInterval, start] );\n    const isSelectedSlot = selected && selected.start !== start;\n    const hasAvailable = typeof selected !== 'undefined';\n\n    const onConfirmBooking = ( { email } ) => {\n        addUser( email, selected );\n    };\n\n\n    const handleChange = ( slot ) => {\n        setSelected( slot );\n        onChange( slot );\n    };\n\n    React.useEffect( () => {\n        if ( selected && isBooked( selected ) ) {\n            setSelected( () => getAvailableSlots() );\n        }\n    }, [bookedSlots, selected] );\n\n    return <div className='flex-column align-items-center'>\n        <Dropdown size='lg' disabled={!hasAvailable} active={isSelectedSlot} isOpen={dropdownOpen}\n                  toggle={onToggleDropdown}>\n            <DropdownToggle caret className={isSelectedSlot ? 'alert-primary col-sm-12' : 'col-sm-12'}>\n                {!hasAvailable && <span>Not Available slots</span>}\n                {hasAvailable &&\n                <React.Fragment><span>{selected.start}</span> - <span>{selected.end}</span></React.Fragment>}\n            </DropdownToggle>\n            <DropdownMenu className='col-sm-12'>\n                <DropdownItem header className='text-center'>Available slots</DropdownItem>\n                {memoizedSlots.map( ( slot, index ) =>\n                    <Slot key={index} currentSlot={slot} activeSlot={selected} onChange={handleChange}/> )}\n\n            </DropdownMenu>\n        </Dropdown>\n        {hasAvailable &&\n        <div className='mt-2 flex-column justify-content-center'>\n            <small className='d-inline-block my-2'>Custom time slot</small>\n            <CustomTimeSlot {...selected} min={start} max={memoizedEndInterval}\n                            onChange={handleChange}/>\n        </div>\n        }\n        <div className='my-3 text-center'>\n            {!isBooked( selected ) && hasAvailable &&\n            <BookingModal slot={selected} onClick={onToggleModal} isOpen={modalOpen}\n                          onConfirmBooking={onConfirmBooking}/>\n            }\n        </div>\n\n    </div>;\n};\n\n\nexport const TimeSlotPropTypes = {\n    start: PropTypes.oneOfType( [PropTypes.string, PropTypes.instanceOf( Date )] ),\n    end: PropTypes.oneOfType( [PropTypes.string, PropTypes.instanceOf( Date )] ),\n    onChange: PropTypes.func,\n};\n\nTimeSlot.propTypes = TimeSlotPropTypes;\n\nexport default React.memo( TimeSlot );\n\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport TimeSlot from './../time-slot';\n\n\nconst TimeSlotList = ( { items, onChange, activeSlot } ) => {\n\n\n    return <div className='row'>\n        {items.map( ( item, index ) => <div key={index} className=\"col-sm-12 col-md-4 my-1\">\n            <TimeSlot key={index} {...item} onChange={onChange} activeSlot={activeSlot}/>\n        </div> )}\n    </div>;\n};\n\nTimeSlotList.propTypes = {\n    onChange: PropTypes.func,\n    activeSlot: PropTypes.shape( {\n        start: PropTypes.string,\n        end: PropTypes.string,\n    } ),\n};\n\n\nexport default React.memo( TimeSlotList );\n","import React from 'react';\nimport { getTimeSlots } from './utils/time-helpers';\nimport BookingProvider from './context/booking-provider';\nimport TimeSlotList from './components/time-slot-list';\n\nfunction App() {\n\n    const [selected, setSelected] = React.useState( null );\n    const slots = React.useMemo( () => getTimeSlots( '07:00', '22:00', 3 ), [] );\n\n    return (\n        <BookingProvider>\n            <div className=\"container mt-5\">\n                <h1>Time Slots</h1>\n                <TimeSlotList onChange={setSelected} activeSlot={selected} items={slots}/>\n            </div>\n        </BookingProvider>\n    );\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}