{"version":3,"sources":["hooks/use-session-storage.js","context/booking-provider/booking-provider.jsx","context/booking-provider/use-bookig-provider.js","hooks/use-toggle.js","utils/time-helpers.js","components/time-range/time-picker.jsx","components/time-range/helpers.js","hooks/use-booked-slots.js","components/time-range/time-range.jsx","components/base-form/base-form.jsx","components/booking-form/booking-form.jsx","components/booking-modal/booking-modal.jsx","components/booking-panel/booking-panel.jsx","components/cancellation-modal/cancellation-modal.jsx","components/account/account.jsx","App.js","serviceWorker.js","index.js"],"names":["useSessionStorage","key","initialValue","raw","React","useState","sessionStorageValue","sessionStorage","getItem","setItem","String","JSON","stringify","parse","state","setState","useEffect","serializedState","BookingProviderContext","createContext","BookingProvider","children","accountName","bookTimeRange","initialUsers","updateSessionStorage","users","setUsers","addUser","useCallback","email","slot","prev","toLowerCase","hasEmail","Set","map","user","has","removeUser","filter","u","value","useMemo","Provider","useBookingProvider","context","useContext","undefined","Error","useToggle","on","setOn","moment","extendMoment","Moment","normalizeTime","time","getTimeSlots","start","end","interval","duration","finish","initialStart","startTime","endTime","finishTime","isBefore","add","timeStops","isSame","subtract","format","isAfter","push","getRange","range","baseProps","showSecond","minuteStep","allowEmpty","hideDisabledOptions","TimePicker","name","onChange","title","disabledHours","min","max","disabledMinutes","props","handleChange","val","memoizedValue","handleDisableHours","disabled","parseInt","disableBeforeMin","Array","from","length","m","i","disableAfterMax","endOf","by","getHoursAfterAsNumber","concat","handleDisabledMinutes","h","className","defaultProps","memo","useBookedSlots","bookedSlots","isBooked","checkIsAvailableSlot","slotRange","some","s","contains","getFirstAvailableSlots","find","r","ran","intersect","notAvailableHours","booked","data","reduce","acc","curr","minute","second","flat","getNotAvailableHours","Row","Col","sm","placeholder","BaseForm","onSubmit","buttonName","buttonColor","disableButton","validInput","invalidInput","values","setValues","handleSubmit","e","preventDefault","target","Form","InputGroup","Input","type","invalid","valid","InputGroupAddon","addonType","Button","color","BookingForm","isEmailExist","v","BookingModal","onClick","isOpen","onConfirmBooking","disableBookButton","size","Modal","toggle","ModalHeader","ModalBody","BookingPanel","isModalOpen","onToggleModal","errors","diff","Math","abs","isSameOrAfter","isSameOrBefore","validateSlot","hasErrors","Alert","onToggle","setUser","isOpenAlert","onToggleAlert","alertMessage","Account","accountTitle","isExpand","onToggleExpand","getAvailableSlots","selectedSlot","setSelectedSlot","Card","CardBody","CardTitle","CardSubtitle","Collapse","defaultRange","App","Container","md","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f0a72488.chunk.js","sourcesContent":["import React from 'react';\n\n\nconst useSessionStorage = ( key, initialValue, raw ) => {\n    const [state, setState] = React.useState( () => {\n        try {\n            const sessionStorageValue = sessionStorage.getItem( key );\n            if ( typeof sessionStorageValue !== 'string' ) {\n                sessionStorage.setItem( key, raw ? String( initialValue ) : JSON.stringify( initialValue ) );\n                return initialValue;\n            } else {\n                return raw ? sessionStorageValue : JSON.parse( sessionStorageValue || 'null' );\n            }\n        } catch {\n\n            return initialValue;\n        }\n    } );\n\n    React.useEffect( () => {\n        try {\n            const serializedState = raw ? String( state ) : JSON.stringify( state );\n            sessionStorage.setItem( key, serializedState );\n        } catch {\n\n        }\n    } );\n    \n\n    return [state, setState];\n};\n\n\nexport default useSessionStorage;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport useSessionStorage from 'hooks/use-session-storage';\n\n/**\n *\n * @type {React.Context<{}>}\n */\nexport const BookingProviderContext = React.createContext( {} );\n\n/**\n *\n * @param children\n * @param accountName\n * @param bookTimeRange\n * @returns {*}\n * @constructor\n */\nconst BookingProvider = ( { children, accountName, bookTimeRange } ) => {\n\n    const [initialUsers, updateSessionStorage] = useSessionStorage( accountName, [], false );\n    const [users, setUsers] = React.useState( () => initialUsers );\n\n    const addUser = React.useCallback( ( email, slot ) => {\n        setUsers( prev => [...prev, { email: email.toLowerCase(), slot }] );\n    }, [] );\n\n\n    const hasEmail = React.useCallback( ( email ) => {\n        const usersSet = new Set( users.map( user => user.email ) );\n        return usersSet.has( email );\n    }, [users] );\n\n    const removeUser = React.useCallback( ( email ) => {\n        if ( hasEmail( email ) ) {\n            setUsers( prev => prev.filter( u => u.email !== email ) );\n        }\n    }, [hasEmail] );\n\n    React.useEffect( () => {\n        updateSessionStorage( users );\n    }, [updateSessionStorage, users] );\n\n    const value = React.useMemo( () => ({\n        addUser,\n        hasEmail,\n        users,\n        bookTimeRange,\n        removeUser,\n    }), [addUser, bookTimeRange, hasEmail, removeUser, users] );\n\n\n    return <BookingProviderContext.Provider value={value}>\n        {children}\n    </BookingProviderContext.Provider>;\n};\n\nBookingProvider.propTypes = {\n    children: PropTypes.node,\n    accountName: PropTypes.string.isRequired,\n    bookTimeRange: PropTypes.shape( {\n        start: PropTypes.string,\n        end: PropTypes.string,\n    } ),\n};\n\n\nexport default BookingProvider;\n","import React from 'react';\nimport { BookingProviderContext } from './booking-provider';\n\n\nconst useBookingProvider = () => {\n    const context = React.useContext( BookingProviderContext );\n\n    if ( context === undefined ) {\n        throw new Error( `useBookingProvider must be used within a BookingProvider` );\n    }\n\n    return context;\n};\n\n\nexport default useBookingProvider;\n","import React from 'react';\n\n/**\n *\n * @param initialValue\n * @returns {[unknown, function(): void]}\n */\nconst useToggle = ( initialValue ) => {\n    const [on, setOn] = React.useState( initialValue );\n\n    const onToggle = React.useCallback( () => setOn( prev => !prev ), [] );\n\n    return [on, onToggle];\n};\n\nexport default useToggle;\n","import Moment from 'moment';\nimport { extendMoment } from 'moment-range';\n\n\nconst moment = extendMoment( Moment );\n\n\nexport const TIME_FORMAT = 'HH:mm';\nexport const getEndTime = ( time, interval = 3, duration = 'hours' ) => {\n    return new moment( time, TIME_FORMAT ).add( interval, duration ).format( TIME_FORMAT );\n\n};\nexport const normalizeTime = ( time ) => moment( time, TIME_FORMAT );\n\n\nexport const getTimeSlots = ( start, end, interval = 1, duration = 'hour', finish = '22:00' ) => {\n    const initialStart = normalizeTime( start );\n    const startTime = normalizeTime( start );\n    const endTime = normalizeTime( end );\n    const finishTime = normalizeTime( finish );\n\n\n    if ( endTime.isBefore( startTime ) ) {\n        endTime.add( 1, 'day' );\n    }\n\n    const timeStops = [];\n\n    while ( startTime <= endTime ) {\n        if ( !startTime.isSame( initialStart ) ) {\n            startTime.subtract( interval, duration );\n        }\n\n\n        const start = new moment( startTime ).format( TIME_FORMAT );\n\n        const end = startTime.add( interval, duration );\n\n        //exit from the loop\n        if ( end.isAfter( finishTime ) ) {\n            break;\n        }\n        timeStops.push( {\n            start: start,\n            end: end.format( TIME_FORMAT ),\n        } );\n\n        startTime.add( interval, duration );\n\n    }\n    return timeStops;\n};\n\n\nexport const getRange = ( { start, end } ) => {\n    const startTime = normalizeTime( start );\n    const endTime = normalizeTime( end );\n\n\n    return moment.range( startTime, endTime );\n};\n\n\nexport const getRoundedHour = ( start ) => {\n    start = moment( start, TIME_FORMAT );\n    const isMoreOrEqualHalf = start.minute() >= 30;\n\n    return +start.minute( isMoreOrEqualHalf ? 60 : 0 ).second( 0 ).format( 'H' );\n\n\n};\n\n\n\n\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport RcTimePicker from 'rc-time-picker';\nimport 'rc-time-picker/assets/index.css';\nimport { TIME_FORMAT, normalizeTime } from 'utils/time-helpers';\nimport { getHoursAfterAsNumber } from './helpers';\n\n\nconst baseProps = {\n    showSecond: false,\n    minuteStep: 30,\n    format: TIME_FORMAT,\n    allowEmpty: false,\n    hideDisabledOptions: false,\n};\n\n\nconst TimePicker = ( { name, onChange, title, value, disabledHours, min, max, disabledMinutes, ...props } ) => {\n\n    const handleChange = React.useCallback( ( val ) => {\n        const value = val.format( TIME_FORMAT );\n        onChange( { [ name ]: value }, name, val );\n    }, [name, onChange] );\n\n    const memoizedValue = React.useMemo( () => normalizeTime( value ), [value] );\n\n    const handleDisableHours = React.useCallback( () => {\n        const disabled = disabledHours( { value, name } );\n        const startTime = parseInt( min );\n        const disableBeforeMin = Array.from( { length: startTime }, ( m, i ) => i );\n        const disableAfterMax = getHoursAfterAsNumber( max );\n        return disabled.concat( disableBeforeMin, disableAfterMax );\n    }, [disabledHours, max, min, name, value] );\n\n    const handleDisabledMinutes = React.useCallback( ( h ) => {\n        const disabled = disabledMinutes( h, name );\n\n        const maxTime = parseInt( max );\n        if ( maxTime === h ) {\n            disabled.push( 30 );\n        }\n        return disabled;\n    }, [disabledMinutes, name, max] );\n\n    return <div className='d-flex flex-column'>\n        <small>{title}</small>\n        <RcTimePicker\n            {...baseProps}\n            name={name}\n            onChange={handleChange}\n            value={memoizedValue}\n            disabledHours={handleDisableHours}\n            disabledMinutes={handleDisabledMinutes}\n            {...props}\n        />\n    </div>;\n};\n\nTimePicker.defaultProps = {\n    disabledHours: () => [],\n    disabledMinutes: () => [],\n};\n\nTimePicker.propTypes = {\n    onChange: PropTypes.func.isRequired,\n    name: PropTypes.string.isRequired,\n    title: PropTypes.string,\n    disabledHours: PropTypes.func,\n    disabledMinutes: PropTypes.func,\n    value: PropTypes.string,\n    placeholder: PropTypes.string,\n    min: PropTypes.string,\n    max: PropTypes.string,\n};\n\n\nexport default React.memo( TimePicker );\n","import { getRange, normalizeTime } from 'utils/time-helpers';\nimport moment from 'moment';\n\nexport const getHoursAfterAsNumber = startTime => Array.from( getRange( {\n    start: normalizeTime( startTime ).add( 1, 'hour' ),\n    end: moment().endOf( 'day' ),\n} ).by( 'hours' ), m => +m.format( 'HH' ) );\n","import React from 'react';\nimport { getTimeSlots, getRange } from './../utils/time-helpers';\nimport { useBookingProvider } from './../context/booking-provider';\n\n\nconst getNotAvailableHours = ( booked, slot ) => {\n    const range = getTimeSlots( slot.start, slot.end, 30, 'minutes' );\n    const ranges = range.filter( r => {\n        const ran = getRange( r );\n        return booked.some( slot => ran.intersect( slot ) );\n    } ).map( getRange );\n    const data = ranges.reduce( ( acc, curr ) => [...acc, Array.from( curr.by( 'hour' ), m => +m.minute( 0 ).second( 0 ).format( 'HH' ) )], [] ).flat();\n    return [...new Set( data )];\n};\n\nconst useBookedSlots = () => {\n    const { users, bookTimeRange } = useBookingProvider();\n    const slots = users.map( user => user.slot );\n    const bookedSlots = slots.map( getRange );\n\n    const isBooked = ( slot ) => {\n        const slotSet = new Set( users.map( ( { slot } ) => JSON.stringify( slot ) ) );\n        return slotSet.has( JSON.stringify( slot ) );\n    };\n\n    const checkIsAvailableSlot = ( slot ) => {\n        const slotRange = getRange( slot );\n        return bookedSlots.some( s => s.contains( slotRange ) );\n    };\n\n    const getFirstAvailableSlots = ( slot ) => {\n\n        const range = getTimeSlots( slot.start, slot.end, 30, 'minutes' );\n\n        return range.find( r => {\n            const ran = getRange( r );\n            const isIntersect = bookedSlots.some( slot => ran.intersect( slot ) );\n            return isIntersect === false;\n        } );\n\n    };\n\n    const notAvailableHours = getNotAvailableHours( bookedSlots, bookTimeRange );\n\n\n    return React.useMemo( () => ({\n        bookedSlots,\n        checkIsAvailableSlot,\n        getFirstAvailableSlots,\n        isBooked,\n        notAvailableHours,\n    }), [bookedSlots, notAvailableHours] );\n};\n\nexport default useBookedSlots;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Row, Col } from 'reactstrap';\nimport TimePicker from './time-picker';\nimport useBookedSlots from 'hooks/use-booked-slots';\n\n\nconst TimeRange = ( { start, end, onChange, range } ) => {\n    const { notAvailableHours } = useBookedSlots();\n    const disabledHours = React.useCallback( () => notAvailableHours, [notAvailableHours] );\n\n    return <Row>\n        <Col sm={6}>\n            <TimePicker\n                name='start'\n                title='Start'\n                placeholder='Start'\n                onChange={onChange}\n                disabledHours={disabledHours}\n                value={start}\n                max={range.end}\n                min={range.start}\n            />\n        </Col>\n        <Col sm={6}>\n            <TimePicker\n                name='end'\n                title='End'\n                placeholder='End'\n                onChange={onChange}\n                disabledHours={disabledHours}\n                value={end}\n                max={range.end}\n                min={range.start}\n\n            />\n        </Col>\n    </Row>;\n\n};\n\nTimeRange.propTypes = {\n    start: PropTypes.string.isRequired,\n    end: PropTypes.string.isRequired,\n    onChange: PropTypes.func.isRequired,\n    range: PropTypes.shape( {\n        start: PropTypes.string,\n        end: PropTypes.string,\n    } ),\n};\n\n\nexport default React.memo( TimeRange );\n\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Button, Form, Input, InputGroup, InputGroupAddon } from 'reactstrap';\n\n\nconst BaseForm = ( { onSubmit, buttonName, buttonColor, disableButton, validInput, invalidInput } ) => {\n    const [values, setValues] = React.useState( null );\n    const handleSubmit = React.useCallback( ( e ) => {\n        e.preventDefault();\n        onSubmit( values );\n    }, [onSubmit, values] );\n\n\n    const onChange = React.useCallback( e => {\n        const target = e.target;\n        setValues( prev => ({\n            ...prev,\n            [ target.name ]: target.value,\n        }) );\n    }, [] );\n\n\n    return <Form onSubmit={handleSubmit}>\n        <InputGroup>\n            <Input type='email'\n                   name='email'\n                   onChange={onChange}\n                   invalid={invalidInput( values )}\n                   valid={values ? validInput( values ) : undefined}\n                   placeholder=\"Please enter your email\"/>\n            <InputGroupAddon addonType=\"append\">\n                <Button disabled={disableButton( values )} color={buttonColor}>{buttonName}</Button>\n            </InputGroupAddon>\n        </InputGroup>\n    </Form>;\n};\n\n\nBaseForm.defaultProps = {\n    buttonName: 'Confirm',\n    buttonColor: 'secondary',\n    disableButton: () => undefined,\n    validInput: () => undefined,\n    invalidInput: () => undefined,\n};\n\nBaseForm.propTypes = {\n    onSubmit: PropTypes.func,\n    buttonName: PropTypes.string,\n    buttonColor: PropTypes.string,\n    disableButton: PropTypes.func,\n    validInput: PropTypes.func,\n    invalidInput: PropTypes.func,\n};\nexport default BaseForm;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { useBookingProvider } from './../../context/booking-provider';\nimport BaseForm from 'components/base-form';\n\nconst BookingForm = ( props ) => {\n    const { hasEmail } = useBookingProvider();\n\n\n    const isEmailExist = values => values && hasEmail( values.email );\n\n\n    return <BaseForm {...props} disableButton={isEmailExist}\n                     invalidInput={isEmailExist}\n                     validInput={v => !isEmailExist( v )}/>;\n};\n\n\nBookingForm.defaultProps = {\n    buttonName: 'Confirm',\n    buttonColor: 'secondary',\n};\n\nBookingForm.propTypes = {\n    onSubmit: PropTypes.func,\n    buttonName: PropTypes.string,\n    buttonColor: PropTypes.string,\n};\nexport default BookingForm;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Button, Modal, ModalHeader, ModalBody } from 'reactstrap';\nimport BookingForm from './../booking-form';\nimport useBookedSlots from './../../hooks/use-booked-slots';\n\n\nconst BookingModal = ( {\n                           onClick,\n                           isOpen,\n                           slot,\n                           onConfirmBooking,\n                           buttonName,\n                       } ) => {\n    const { checkIsAvailableSlot } = useBookedSlots();\n\n\n    const handleSubmit = React.useCallback( value => {\n        onConfirmBooking( value );\n        onClick();\n    }, [onClick, onConfirmBooking] );\n    const disableBookButton = checkIsAvailableSlot( slot );\n\n\n    return (\n        <div>\n            <Button color=\"primary\" className='text-capitalize' size='lg' disabled={disableBookButton} onClick={onClick}>{buttonName}</Button>\n            <Modal isOpen={isOpen} toggle={onClick}>\n                <ModalHeader toggle={onClick}>Slot {slot.start} - {slot.end}</ModalHeader>\n                <ModalBody>\n                    <BookingForm onSubmit={handleSubmit}/>\n                </ModalBody>\n            </Modal>\n        </div>\n    );\n};\n\nBookingModal.defaultProps = {\n    buttonName: 'Book now',\n};\n\nBookingModal.propTypes = {\n    slot: PropTypes.shape( {\n        start: PropTypes.string,\n        end: PropTypes.string,\n    } ),\n    onClick: PropTypes.func,\n    isOpen: PropTypes.bool,\n    onConfirmBooking: PropTypes.func,\n    buttonName: PropTypes.string,\n};\n\nexport default BookingModal;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport BookingModal from 'components/booking-modal';\nimport useToggle from 'hooks/use-toggle';\nimport { useBookingProvider } from 'context/booking-provider';\nimport { normalizeTime } from 'utils/time-helpers';\nimport { Alert } from 'reactstrap';\n\nconst MAX_SLOT_RANGE = 3;\n\nconst validateSlot = ( { start, end } ) => {\n    const startTime = normalizeTime( start );\n    const endTime = normalizeTime( end );\n    const diff = Math.abs( startTime.diff( endTime, 'hours', true ) );\n    if ( diff > MAX_SLOT_RANGE ) {\n        return `Booking time should be not more than ${MAX_SLOT_RANGE} hours`;\n    }\n    if ( diff === 0 ) {\n        return `Booking time should be at least 30 minutes`;\n    }\n    if ( startTime.isSameOrAfter( endTime ) ) {\n        return `Start time couldn't be the same or bigger than ${end} h`;\n    }\n    if ( endTime.isSameOrBefore( startTime ) ) {\n        return `End time couldn't be the same or less than ${start} h`;\n    }\n\n    return undefined;\n\n};\n\nconst BookingPanel = ( { slot } ) => {\n\n    const { addUser } = useBookingProvider();\n    const [isModalOpen, onToggleModal] = useToggle( false );\n    const onConfirmBooking = React.useCallback( ( { email } ) => {\n        addUser( email, slot );\n    }, [addUser, slot] );\n\n\n    const errors = React.useMemo( () => validateSlot( slot ), [slot] );\n\n    const hasErrors = typeof errors !== 'undefined';\n\n\n    return <div className='py-3'>\n        <Alert color='danger' className='my-2' isOpen={hasErrors}>\n            <h4 className=\"alert-heading\">Warning!</h4>\n            <strong>{errors}</strong>\n        </Alert>\n        {!hasErrors &&\n        <BookingModal\n            slot={slot}\n            onConfirmBooking={onConfirmBooking}\n            isOpen={isModalOpen}\n            onClick={onToggleModal}\n            buttonName={`Book now ${slot.start} - ${slot.end}`}\n        />\n        }\n    </div>;\n};\n\nBookingPanel.propTypes = {\n    slot: PropTypes.shape( {\n        start: PropTypes.string,\n        end: PropTypes.string,\n    } ).isRequired,\n};\n\nexport default BookingPanel;\n","import React from 'react';\nimport { Button, Modal, ModalBody, ModalHeader, Alert } from 'reactstrap';\nimport useToggle from 'hooks/use-toggle';\nimport { useBookingProvider } from 'context/booking-provider';\nimport BaseForm from 'components/base-form';\n\n\nconst CancellationModal = () => {\n    const [isOpen, onToggle] = useToggle( false );\n    const [user, setUser] = React.useState( null );\n    const [isOpenAlert, onToggleAlert] = useToggle( false );\n    const { users, removeUser } = useBookingProvider();\n\n\n    const handleSubmit = React.useCallback( ( { email } ) => {\n        const user = users.find( u => u.email === email.toLowerCase() );\n        setUser( user );\n        onToggleAlert();\n    }, [onToggleAlert, users] );\n\n    const handleRemoveUser = () => {\n        removeUser( user.email );\n        onToggle();\n    };\n\n    const alertMessage = user ?\n        `Are you sure you want to cancel your reservation  ${user.slot.start} - ${user.slot.end}h ?`\n        : `Email doesn't exist`;\n\n    return <div>\n        <Button color=\"danger\" className='text-capitalize' size='sm'\n                onClick={onToggle}>Cancel reservation</Button>\n        <Modal isOpen={isOpen} toggle={onToggle}>\n            <ModalHeader toggle={onToggle}>Cancel reservation</ModalHeader>\n            <ModalBody>\n                <BaseForm onSubmit={handleSubmit} buttonName='Remove' buttonColor='danger'/>\n                <Alert className='my-2' color={user && user.email ? 'warning' : 'danger'} isOpen={isOpenAlert}\n                       toggle={onToggleAlert}>\n                    <h4 className=\"alert-heading\">Warning!</h4>\n                    <strong>{alertMessage}</strong>\n                    <hr/>\n                    <div className='d-flex flex-row-reverse'>\n                        {user && user.email &&\n                        <Button color='danger' onClick={handleRemoveUser}>Confirm</Button>\n                        }\n                    </div>\n                </Alert>\n            </ModalBody>\n        </Modal>\n    </div>;\n};\n\n\nexport default React.memo( CancellationModal );\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Card, CardTitle, CardSubtitle, Button, CardBody, Collapse } from 'reactstrap';\nimport useToggle from 'hooks/use-toggle';\nimport TimeRange from 'components/time-range';\nimport useBookedSlots from 'hooks/use-booked-slots';\nimport BookingPanel from 'components/booking-panel';\nimport CancellationModal from 'components/cancellation-modal';\n\n\nconst Account = ( { accountTitle, slotRange } ) => {\n    const [isExpand, onToggleExpand] = useToggle( false );\n    const { getFirstAvailableSlots, isBooked, bookedSlots } = useBookedSlots();\n\n\n    const getAvailableSlots = React.useCallback( () => getFirstAvailableSlots( slotRange ), [getFirstAvailableSlots, slotRange] );\n\n    const [selectedSlot, setSelectedSlot] = React.useState( getAvailableSlots );\n\n    const onChange = React.useCallback( ( data ) => {\n        setSelectedSlot( prev => ({ ...prev, ...data }) );\n    }, [] );\n\n\n    React.useEffect( () => {\n        if ( selectedSlot && isBooked( selectedSlot ) ) {\n            setSelectedSlot( () => getAvailableSlots() );\n        }\n    }, [bookedSlots, getAvailableSlots, isBooked, selectedSlot] );\n\n\n    return <Card>\n        <CardBody className='d-flex flex-column justify-content-center align-items-center'>\n            <CardTitle className='text-center my-2'>\n                <strong>{accountTitle}</strong>\n            </CardTitle>\n            <CardSubtitle className='my-2'>\n                <i className='text-muted'>Choose your time (0.5-3h)</i>\n            </CardSubtitle>\n            <Button onClick={onToggleExpand}\n                    color={isExpand ? 'danger' : 'success'}>{isExpand ? 'Close' : 'Show available slots'}</Button>\n            <Collapse isOpen={isExpand}>\n                <div className=\"d-flex flex-column py-3\">\n                    <TimeRange range={slotRange} onChange={onChange} {...selectedSlot}/>\n                    {setSelectedSlot && <BookingPanel slot={selectedSlot}/>}\n                </div>\n            </Collapse>\n            <CardBody>\n                <CancellationModal/>\n            </CardBody>\n        </CardBody>\n    </Card>;\n};\n\n\nAccount.propTypes = {\n    accountTitle: PropTypes.string,\n    slotRange: PropTypes.shape( {\n        start: PropTypes.string,\n        end: PropTypes.string,\n    } ).isRequired,\n\n};\n\nexport default Account;\n","import React from 'react';\nimport BookingProvider from './context/booking-provider';\nimport Account from 'components/account';\nimport { Container, Row, Col } from 'reactstrap';\n\nconst defaultRange = {\n    start: '07:00',\n    end: '22:00',\n};\n\nfunction App() {\n\n    return (\n        <Container className='mt-5'>\n            <Row>\n                <Col sm={12} md={6}>\n                    <BookingProvider bookTimeRange={defaultRange} accountName='room_1'>\n                        <Account accountTitle='Laundry room 1' slotRange={defaultRange}/>\n                    </BookingProvider>\n                </Col>\n                <Col sm={12} md={6}>\n                    <BookingProvider accountName='room_2' bookTimeRange={defaultRange}>\n                        <Account accountTitle='Laundry room 2' slotRange={defaultRange}/>\n                    </BookingProvider>\n                </Col>\n            </Row>\n        </Container>\n    );\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}